{"version":3,"sources":["logo.svg","components/Questions.jsx","components/Category.jsx","components/Difficulty.jsx","components/Answers.jsx","components/QuizBar.jsx","components/MyComponents.jsx","App.js","reportWebVitals.js","index.js"],"names":["Questions","props","Typography","style","minHeight","variant","gutterBottom","text","toString","replace","Category","color","Difficulty","rating","Rating","size","name","value","readOnly","Answers","check","val","Invoke_Revoke","Grid","container","spacing","alignContent","item","xs","this","map","d","i","sm","Button","minWidth","disabled","IsInvokAns","onClick","Component","QuizBar","checkans","data","correct_answer","setState","SuccessLabel","score","AllowNext","StopAns","Stop","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","componentDidUpdate","pre","opt","incorrect_answers","concat","state","category","difficulty","question","MyComponents","setNext","Stepper","DisableNext","getScore","countRight","countWrong","showbtn","va","btndis","questions","q","C_Answer","percentage","Score","Number","isNaN","isFinite","margin","LinearProgress","height","Paper","elevation","float","parseInt","ProgressBar","striped","now","width","marginTop","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07ab1b75.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function Questions(props) {\r\n    return (<Typography style={{minHeight:\"80px\"}} variant=\"h6\" gutterBottom>\r\n                { props.text.toString().replace(/%20/g,' ')\r\n                        .replace(/%3F/g,'?').replace(/%2C/g,',')\r\n                        .replace(/%22/g,'\"').replace(/%27/g,\"'\")} \r\n            </Typography> \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Typography } from '@material-ui/core'; \r\nexport default function Category(props) {\r\n    return ( <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\r\n                {props.text.toString().replace(/%20/g,' ')\r\n                            .replace(/%3A/,':').replace(/%26/,'&')}\r\n            </Typography>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Rating } from '@material-ui/lab';\r\n\r\nexport default function Difficulty(props) {\r\n    let rating=0;\r\n        if (props.text==\"hard\") \r\n            rating=3\r\n        else if (props.text==\"easy\")\r\n            rating=1;\r\n        else if (props.text==\"medium\")\r\n            rating=2\r\n    return (<Rating size=\"small\" name=\"read-only\" value={rating}  readOnly />)\r\n}\r\n","import React,{Component} from 'react'\r\nimport { Grid } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\n\r\nexport default class Answers extends Component {\r\n    constructor(props){\r\n        super(props)   \r\n    }   \r\n    check=(val)=>{\r\n        this.props.check(val); \r\n        this.props.Invoke_Revoke(true);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Grid container spacing={1} alignContent=\"centre\"> \r\n             <Grid item xs={1}  > \r\n                </Grid>\r\n                 {this.props.text.map((d,i) => \r\n                <Grid item sm key={i} item xs={10}>\r\n                        <Button\r\n                         size=\"small\"\r\n                         style={{minWidth:\"200px\"}}\r\n                         variant=\"contained\" \r\n                         color=\"primary\"\r\n                         disabled={this.props.IsInvokAns}   \r\n                         onClick={()=>this.check(d)}\r\n                         >\r\n                            {d.toString().replace(/%20/g,' ').replace(/%24/g,'$').replace(/%2C/g,',')}\r\n                        </Button>\r\n                </Grid> \r\n                     )} \r\n                      <Grid item xs={1}  > \r\n                </Grid>\r\n             </Grid>    \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react' \r\nimport Questions from './Questions';\r\nimport Category from './Category';\r\nimport Difficulty from './Difficulty';\r\nimport Answers from './Answers'; \r\nexport default class QuizBar extends Component {\r\n    constructor(props){\r\n        super(props) \r\n        this.state={ \r\n            Stop:false,\r\n            SuccessLabel:\"\", \r\n            opt:this.shuffle(this.props.data.incorrect_answers.concat(this.props.data.correct_answer)),\r\n        } \r\n    }  \r\n    checkans=(value)=>{ \r\n        if(value==this.props.data.correct_answer){\r\n            this.setState({SuccessLabel:\"Correct..!\"});\r\n            this.props.score(true);\r\n        }else{\r\n            this.setState({SuccessLabel:\"Incorrect.\"});\r\n            this.props.score(false);\r\n        }\r\n        this.props.AllowNext(false);\r\n    }\r\n   StopAns=(value)=>this.setState({Stop :value}) \r\n     shuffle=(array)=> {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n      \r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n      \r\n          // Pick a remaining element...\r\n          randomIndex = Math.floor(Math.random() * currentIndex);\r\n          currentIndex -= 1;\r\n      \r\n          // And swap it with the current element.\r\n          temporaryValue = array[currentIndex];\r\n          array[currentIndex] = array[randomIndex];\r\n          array[randomIndex] = temporaryValue;\r\n        }\r\n      \r\n        return array;\r\n      }\r\n componentDidUpdate=(pre)=>pre.data != this.props.data? \r\n       this.setState({SuccessLabel:\"\",opt:this.shuffle(this.props.data.incorrect_answers.concat(this.props.data.correct_answer))})\r\n :null   \r\n    render() {  \r\n        return (\r\n            <div> \r\n                <Category   text={this.props.data.category}     />\r\n                <Difficulty text={this.props.data.difficulty}   />\r\n                <Questions  text={this.props.data.question}     />\r\n                <hr />\r\n                <Answers    \r\n                    text={this.state.opt} \r\n                    check={this.checkans} \r\n                    StopAns={this.StopAns}\r\n                    IsInvokAns={this.props.IsInvokAns}\r\n                    Invoke_Revoke={this.props.Invoke_Revoke}\r\n                /> \r\n                <h1>{this.state.SuccessLabel}</h1> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport q from \"../questions.json\"; \r\nimport { \r\n  Button,\r\n  Grid,\r\n  LinearProgress,\r\n  Paper, \r\n} from \"@material-ui/core\"; \r\nimport QuizBar from './QuizBar';\r\nimport { ProgressBar } from 'react-bootstrap'; \r\nimport { Typography } from '@material-ui/core'; \r\nexport default class MyComponents extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            questions:q.map(({question})=>question),\r\n            C_Answer:q.map(({correct_answer})=>correct_answer),\r\n            AllowNext:false,\r\n            IsInvokAns:false,\r\n            Stepper:0,\r\n            countRight:0,\r\n            countWrong:0,\r\n            DisableNext:true, \r\n        }\r\n    }  \r\n    setNext=()=>this.setState({Stepper:this.state.Stepper+1,DisableNext:true,IsInvokAns:false })\r\n    AllowNext=(value)=>this.setState({DisableNext: value})\r\n    getScore=(val)=>(val)? this.setState({countRight:this.state.countRight+1}):this.setState({countWrong:this.state.countWrong+1})\r\n    Invoke_Revoke=(value)=>this.setState({IsInvokAns:value})\r\n    showbtn=(va)=>this.setState({btndis:va})\r\n\r\n    render() {\r\n        let{countRight,countWrong,IsInvokAns,Stepper,questions}=this.state;\r\n        let percentage = ((countRight/questions.length)*100);\r\n        let Score = ((countRight/Stepper)*100); \r\n        if (Number.isNaN(Score)) \r\n            Score =0;\r\n        if (!Number.isFinite(Score)) \r\n            Score=0;\r\n \r\n        return (<div style={{margin:\"20px\"}}  >\r\n\r\n        { Stepper < questions.length?<Grid container spacing={3}  > \r\n                <Grid item xs={2}  > \r\n                </Grid>\r\n                <Grid item xs={8}  > \r\n                <LinearProgress variant=\"determinate\" value={ Stepper*5} style={{height:\"15px\"}} />\r\n                <br />\r\n                    <Typography variant=\"h5\" >Question { Stepper+1} of {  questions.length}</Typography>\r\n                    \r\n                    \r\n\r\n                    <Paper style={{minHeight:\"270px\"}} elevation={1}>\r\n                         <QuizBar  \r\n                            data={q[Stepper]}\r\n                            AllowNext={this.AllowNext}\r\n                            Invoke_Revoke={this.Invoke_Revoke}\r\n                            IsInvokAns= {IsInvokAns}\r\n                            score={this.getScore}\r\n                        />   \r\n                    </Paper>\r\n                    \r\n                    \r\n                    <br />\r\n                    <Button style={{float:\"right\"}} size=\"large\" color=\"secondary\" variant =\"contained\"\r\n                     onClick={this.setNext} disabled={this.state.DisableNext}>\r\n                        NEXT\r\n                    </Button>\r\n                     \r\n                    <br /><h5>Score {parseInt(Score) }%</h5>\r\n                    <ProgressBar>\r\n                        <ProgressBar striped variant=\"success\" now={percentage} key={1} />\r\n                        <ProgressBar variant=\"warning\" now={Score} key={2} /> \r\n                    </ProgressBar> \r\n                    <br />\r\n                    <ProgressBar striped variant=\"success\" now={100} style={{height:\"5px\",width:\"100px\"}}/> Percent\r\n                    <ProgressBar striped variant=\"warning\" now={100} style={{height:\"5px\",width:\"100px\"}}/> Score\r\n\r\n                </Grid>\r\n                 <Grid item xs={2} >                        \r\n</Grid>  \r\n                 <br />\r\n                 <br />              \r\n            </Grid> :<Grid container spacing={3}  > \r\n                <Grid item xs={2}  > \r\n                </Grid>\r\n                <Grid item xs={8} > \r\n                <Paper style={{minHeight:\"350px\",marginTop:\"20px\"}} elevation={5}>\r\n                    \r\n                <Grid container spacing={3}  >\r\n                    <Grid item xs={2}  > \r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={8}  > \r\n                         <h4>  <b> Thankyou for taking this Quiz.</b></h4><hr /><br />\r\n                        <Typography variant=\"h6\" >Exam Details : </Typography>\r\n                    <hr />\r\n                    <h6>Total Question: {<b style={{margin:\"100px\"}}>{questions.length}</b>}</h6>\r\n                    <h6>Total Correct Answer(s):{<b style={{margin:\"40px\"}}>{countRight}</b>}</h6>\r\n                    <h6>Total Wrong Answer(s):{<b style={{margin:\"40px\"}}>{countWrong}</b>}</h6>\r\n                    <h6>Percentage:{<b style={{margin:\"40px\"}}>{percentage} %</b>}</h6>\r\n                    <h6>Over All Score:{<b style={{margin:\"40px\"}}>{Score} </b>}</h6> \r\n                    <h6>Grade:{<b style={{margin:\"40px\"}}>{percentage>50?\"Normal (above 50 or higher)\":\"Failed (less then 50 or lowest)\"} </b>}</h6>\r\n                    <hr />\r\n                    <h6 >This App is Developed By : Muhammad Abu Baker</h6>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={2}>\r\n                     </Grid>\r\n                </Grid>\r\n\r\n                </Paper>\r\n               \r\n                </Grid>\r\n                 <Grid item xs={2} ></Grid> \r\n                 <br />              \r\n            </Grid>}\r\n\r\n        </div> )      \r\n    }\r\n} ","import logo from './logo.svg';\r\nimport './App.css';\r\nimport MyComponents from './components/MyComponents'; \r\nfunction App() {\r\n  return (\r\n    // <div className=\"App\">\r\n    <div >\r\n\r\n<MyComponents />\r\n\r\n      {/* <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}